// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  COURSE_ADMIN
  STUDENT
}

enum SubmissionType {
  document
  github_repo
  screenshot
  text
  website
}

enum SubmissionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Quality {
  excellent
  good
  average
  poor
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  createdCourses     Course[]     @relation("CourseCreator")
  createdQuestions   Question[]   @relation("QuestionCreator")
  createdExamples    BaseExample[] @relation("ExampleCreator")
  submissions        Submission[]
  courseAdminships   CourseAdmin[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  creator      User          @relation("CourseCreator", fields: [createdBy], references: [id])
  questions    Question[]
  courseAdmins CourseAdmin[]
}

model CourseAdmin {
  id       String @id @default(cuid())
  userId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Question {
  id               String         @id @default(cuid())
  courseId         String
  title            String
  description      String?
  questionNumber   Int
  submissionType   SubmissionType
  assessmentPrompt String         @db.Text
  criteria         String[]       @default([])
  guidance         String?        @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        String

  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator      User          @relation("QuestionCreator", fields: [createdBy], references: [id])
  baseExamples BaseExample[]
  submissions  Submission[]

  @@unique([courseId, questionNumber])
}

model BaseExample {
  id          String   @id @default(cuid())
  questionId  String
  title       String
  content     String   @db.Text
  quality     Quality
  explanation String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  creator  User     @relation("ExampleCreator", fields: [createdBy], references: [id])
}

model Submission {
  id             String           @id @default(cuid())
  questionId     String
  userId         String?          // Nullable for public submissions
  submissionType SubmissionType
  content        String           @db.Text
  additionalInfo String?          @db.Text
  status         SubmissionStatus @default(PENDING)
  remark         String?
  feedback       String?          @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assessedAt     DateTime?

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}