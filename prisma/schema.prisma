// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  COURSE_ADMIN
  STUDENT
}

enum SubmissionType {
  TEXT
  DOCUMENT
  GITHUB_REPO
  SCREENSHOT
  WEBSITE
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Better Auth Models
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

// Core Application Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth relations
  accounts         Account[]
  sessions         Session[]

  // Application relations
  createdCourses   Course[]             @relation("CourseCreator")
  createdQuestions Question[]           @relation("QuestionCreator")
  createdExamples  BaseExample[]        @relation("ExampleCreator")
  submissions      Submission[]
  enrollments      CourseEnrollment[]
  courseAdminships CourseAdmin[]

  @@map("user")
}

model Course {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  creator      User                @relation("CourseCreator", fields: [creatorId], references: [id])
  questions    Question[]
  enrollments  CourseEnrollment[]
  courseAdmins CourseAdmin[]
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model CourseAdmin {
  id       String @id @default(cuid())
  userId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Question {
  id               String         @id @default(cuid())
  courseId         String
  questionNumber   Int
  title            String
  description      String         @db.Text
  submissionType   SubmissionType
  assessmentPrompt String?        @db.Text
  criteria         String[]       @default([])
  redFlags         String[]       @default([])
  conditionalChecks String[]      @default([])
  guidance         String?        @db.Text
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        String

  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator      User          @relation("QuestionCreator", fields: [createdBy], references: [id])
  baseExamples BaseExample[]
  submissions  Submission[]

  @@unique([courseId, questionNumber])
}

model BaseExample {
  id          String   @id @default(cuid())
  questionId  String
  title       String
  description String?  @db.Text
  content     String   @db.Text
  fileUrl     String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  creator  User     @relation("ExampleCreator", fields: [createdBy], references: [id])
}

model Submission {
  id                String           @id @default(cuid())
  questionId        String
  userId            String?          // Nullable for anonymous submissions (automated mode only)
  submissionContent String?          @db.Text
  submissionUrl     String?
  fileUrl           String?
  status            SubmissionStatus @default(PENDING)
  assessmentResult  Json?            // Stores AI assessment results
  confidence        Float?

  // Manual feedback fields
  manualFeedback    String?          @db.Text
  manualScore       String?          // e.g., "Pass", "Good", "Great", "Excellent"
  reviewedBy        String?          // Admin user ID who reviewed
  reviewedAt        DateTime?

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  processedAt       DateTime?

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}